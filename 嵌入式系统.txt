一.计算机组成
	什么是计算机？
	计算机由软件和硬件组成。可以浅显理解为计算机其实就是一个可以跑程序的电子元器件
	计算机可以分成两类：
	(1)通用计算机
		硬件和软件都是通用的，比如个人PC，服务器
	(2)专用计算机
		搭载嵌入式系统的计算机就是专用计算机
		典型：手机(除了个人PC以外的所有的智能电子产品)
		那么什么是嵌入式系统？
	1.嵌入式系统 
		以应用为中心、以现代计算机技术为基础、能够根据用户需求(功能、可靠性、成本、功耗和体积)灵活裁剪软硬件
		的专用计算机系统
		所以嵌入式系统就是为了某个专门应用场景设计的计算机系统
		
		嵌入式系统也分成两部分：
		(1)硬件
			1.芯片：CPU+总线+控制电路
			2.外围电路：服务于芯片工作的外部电路
				最小系统的组成：
					芯片：运行程序
					复位电路：从断电到上电的过程，目的就是让芯片重新开始工作
					晶振电路：提供时钟,时钟是设备的"心脏"，没有时钟，设备是无法工作的，后续在使用某些设备的时候
							都必须是开启时钟
					供电电路：提供电子元器件工作的能源
		(2)软件
			1.bootloader：引导加载程序，一般是系统在上电之后运行的第一段代码，用于引导OS(操作系统)运行
				为什么需要引导？
				OS的运行需要所有的硬件环境都配置好了之后才能运行。但是刚上电的时候，环境是没有准备好的。
				比如：GEC-M4的晶振是8M。OS运行的需要的频率是168M。很明显环境达不到要求
				bootloader可以在低频下完成硬件的初始化，以便于OS的运行 
			2.OS：操作系统 
				操作系统是"前人"为了让后来者能够更好的开发程序，可以不需要去过多的关注硬件去实现功能开发的
				一种软件 
				当下的操作系统是分成两类(以系统调度算法去区分的)
					(1)实时操作：以程序的优先级为主的调度算法 
						优先级越高的程序越先执行，优先级低的程序必须等到高优先级的程序结束或者主动让出CPU才能
						程序 
						当一个高优先级的程序在执行，有一个更高的优先级程序出现，CPU会先执行更高优先级的程序(抢占)
						比如： uCOS/FreeRTOS 
					(2)分时操作系统：以时间片轮转的形式为主的调度算法 
						给每个程序"一段时间"去执行，时间到了，就必须让出CPU给下一个程序运行，一次反复
						如：windows linux 等大部分桌面操作系统
				当然操作系统并没有那么绝对，实时里面一定也会有分时，分时里面也会有实时
			
			3.应用程序(包括文件系统)
				我们之前写的所有的代码都是应用程序
						
	2.计算机的组成 
		当下的计算机系统分成两个流派： 
			冯诺依曼体系结构和哈佛体系结构
			(1)冯诺依曼体系结构(存储程序型电脑)
				最开始的计算机仅有固定的数学计算程序
				1943年第一台计算机(巨人机)诞生就是为了破解恩尼格密码系统，45年二战结束。(普遍认为46年诞生的
				ENIAC才是第一台计算机) 
				冯诺依曼体系结构把计算机系统分成如下的几个部分：
					1、算数逻辑单元(运算器)
					2、控制器(CPU = 运算器 + 控制器 )
					3、存储器：用来存储指令和数据(以二进制的形式存储)
					4、输入设备和输出设备 
			
				冯诺依曼体系结构的特点： 
					1.计算机处理的数据和指令全部用二进制表示
					2.指令和数据不加区别存储在同一个存储器
					3.顺序执行每一条指令
				
				上述的指令和数据虽然都是二进制，但是属性不一样。
					指令：只读属性 
					数据：可读可写属性 
				所以把指令和数据分开保存。
					也就是把存储器分成了只读存储器和可读可写存储器 
					ROM：Read Only Memory 
					RAM: Random Access Memory 
				因此衍生了第二种体系结构：哈佛体系结构 
			(2)哈弗体系结构
				是将指令和数据分开存储的存储器结构
				但是哈佛体系结构没有突破冯诺依曼结构 
				
				在刚才的图示中，ROM是只读存储器，那么ROM中的数据来自哪里？
					"只读"只是针对于CPU，目的为了确保在程序运行期间，程序指令不能更改 
					通过烧写器将可执行的程序烧录进ROM 
					一般的，硬件厂商在设计开发板，会设计一个烧写电路 
			那么计算机 = 运算器 + 控制器 + 存储器 + 输入设备 + 输出设备 
			那么这么多单元之间是如何通信？ ---->总线 
	3.总线 
		计算机系统内部各组件之间都是通过总线来传递数据。
		现代计算机都是电子计算机，那么各组件之间传递都是电信号(高电平1 低电平0)
		总线：多根"电线"
		
		总线有两个特点： 
			1.多个部件可以同时从总线上接收消息。总线通信是广播式 
				如果同时有两个设备往总线上发送消息，会怎么办？
			2.任意时刻智能允许一个设备向总线上发送消息，称之为系统瓶颈。
		
		总线按功能可以分成3类： 
			1.数据总线DB ：负责部件与部件之间的数据传输 
				特点：双向传输 
			2.地址总线AB ：负责传递地址数据 
				特点：单向传输，只能由CPU传输，地址总线的宽度应该与寻址空间相关，比如：如果是32bit的寻址空间
					地址总线应该是32根 
				地址总线实际上由设备地址和片内地址组成
				设备地址：表示想通信的那个设备
				片内地址：表示访问该设备的哪个存储单元 
				
			3.控制总线CB：负责命令的传输 
				读信号、写信号、片选信号......
			请理解图示中 总线.png	
		总线按位置进行划分： 
			1.片内总线
			2.系统总线 
			3.通信总线.....
			
	4.CPU的工作原理 
		CPU = 算数逻辑单元(ALU) + 控制电路(Control Unit) + 寄存器(Register)
		4.1 算数逻辑单元 
			专门执行算数和逻辑运算的数字电路 
		4.2 控制电路  
			控制电路是整个CPU的指挥中心。根据用户预先编好的程序，依次从存储器种提取指令，根据指令发送控制命令
		4.3 寄存器(Register)
			寄存器是CPU内部用来存放数据的一些小型的存储区域，用来暂时的存放参与运算的数据或运算结果。
			
	5.指令流水线 
		指令流水线是将从存储器获取指令到CPU处理指令到最后产生结果，分成多个步骤，并且让不同的组件去完成不同任务从而
		实现高效的指令运行。指令流水线是为了提高处理器处理指令的效率，把一条指令的操作分成许多的小步骤。
		比如一条指令分成三个步骤：取指令、译码、执行

	6.一些基本概念 
		(1)机器字长
			是指CPU一次能够处理数据的位数，通常跟CPU的寄存器大小有关 
			比如：GEC-M4采用的是STM32F407，寄存器为32bits，机器字长为32位 
			字长越长，数据的范围越广，效率越高 
		(2)int与机器字长的关系 
			int 一般是机器中最自然的长度。
			其中用unsigned long 来表示一个地址的值 
			比如去存储一个地址0x1234 
			unsigned long *addr = (unsigned long *)0x1234;
		(3)bit:一个存储元件，存储器最小单元，可以存储一个二进制码(0/1)
		(4)byte：一个存储元件，存储器的最小单位，一个地址对应一个字节的数据
		(5)CPU厂商：负责研发和设计CPU 
			目前主流的CPU架构有：
			(CPU架构是CPU厂商給属于同一个系列的CPU产品定的一个规范，目的就是为了区分不同的CPU)
			x86架构： 
				Intel公司设计，Intel可以设计CPU也可以生产CPU 
				具有复杂的指令集，功能比较强大，功耗很大。
				主要应用于PC 
			ARM架构： 
				ARM公司设计。
				ARM公司只设计CPU而不生产，提供CPU方案授权给其它的芯片生产商 
				精简指令集，功能也很强大，功耗小一点，所以适用于嵌入式系统。
				
			....
		(6)芯片厂商 
			主要负责生产CPU，当然也会有一些芯片厂商会自主研发设计CPU 
			Intel、三星、海思、ST(STM32、STC89C51)、联发科.....
		(8)ARM系列产品 
			ARM：既是公司名(全球最大的芯片研发中心)，也是一个架构名，也是一个指令集 
			其产品在嵌入式领域应用非常广泛。
			早期的产品：ARM7、ARM9......
			ARM12以后，ARM的产品不再以传统的方式进行命名，而是分成三个系例：
				ARM Cortex-A 系列： 
					性能级CPU，对主频和性能要求非常高 
					A7、A9.......
				ARM Cortex-R 系列： 
					对实时性要求较高，军工和工业上应用很广泛 
				ARM Cortex-M 系列：
					单片机系列 --->MCU微控制器 
					常见的：M0、M3、M4....... 
					
二. ARM Cortex-M4的工作状态(处理器状态)
	ARM公司设计的CPU，可以支持多种指令集。
	计算机指令就是指挥机器工作的指示，指令集就是CPU中用来计算的一套指令的集合。
	(1)ARM指令集： 
		ARM公司提供,32bits指令(一条指令32bits)，功能强大 
		通用汇编指令集
	(2)Thumb指令集 
		2.1 Thumb指令集
			16bits
		2.2 Thumb-2 指令集 
			32bits，功能强大，并且增加了专用的DSP(数字信号处理)指令
	因此我们把	ARM Cortex-M4 正在执行哪种指令集称之为哪种工作状态 
		ARM状态 
		Thumb状态  
		
三. ARM Cortex-M4的寄存器 
	按用途划分为：通用寄存器、专用寄存器、特殊寄存器 
	(1)通用寄存器共13个 R0-R12 
		指没有特殊含义和特殊用途的寄存器 
		R0-R7： 
			Thumb-2和Thumb都能访问 
		R8-R12： 
			只有少量的Thumb指令可以访问，Thumb-2的所有指令都可以访问。 
			
	(2)专用寄存器，只有四个，分别是R13(SP)、R14(LR)、R15(PC)、xPSR 
		"专用寄存器"：有固定用途的寄存器 
		2.1 R13(SP): Stack Pointer 
			堆栈指针：用来保存堆栈的栈顶地址 
			"堆栈"：是指"用栈的思想"来管理一块内存
			栈：先进后出 
			为什么需要堆栈？
			目的就是为了支持过程调用(函数调用)
			过程调用：其实就是跳转，我们在执行一个过程(函数)的时候，遇到了跳转指令。需要跳转到另外一个过程去执行，但是我们
				所有的指令产生的结果都存放在寄存器中，如果另外一个过程中也有可能会修改这些寄存器的值，在过程结束后，返回到
				原来的过程的时候，过程产生的数已经不对了。
				因此在过程调用的前后，就需要对寄存器进行保护和恢复
				"现场保护"：将寄存器中的数据保存到某一块地址连续的存储空间(存储器)中
				"现场恢复"：将原本保存在存储器中的数据，有序的恢复到寄存器中
				这个过程，刚好符合先进后出的思想----栈 
			Cortex-M4有两个堆栈：双堆栈结构
				主要是为了支持操作系统，把操作系统用的栈和用户用的栈分开
				MSP：主堆栈指针。给OS和中断的代码使用 
				PSP: 进程堆栈指针，主要给用户代码使用
	今晚的作业： 
		把剩下的三个专用寄存器的概念以及使用查阅
		总线的图示 
		
				







	
			
